{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Main","text":"","tags":["tag1","tag2"]},{"location":"#intro","title":"Intro","text":"<p>This website provides documentation for an embedded systems project. The project is a spinning top designed to provide a fun and interesting way to get high school students interested in STEM. This website is meant to document the ideas and decision making process of our team throughout the projects timeline. We also have individual websites to document our individual systems and provide more information for each section of our project.</p>","tags":["tag1","tag2"]},{"location":"#team-summary","title":"Team Summary","text":"<p>We are Team 309A in the EGR314 class, developing an interactive sensor-actuator system using two custom-designed PCBs: one for a temperature sensor subsystem and the other for a motor driver subsystem. Each PCB uses a different communication protocol, with the sensor sending data via UART to the motor driver. The motor responds by changing speed or direction based on temperature values. In this way, by using a sensor and actuator, we fulfill the project requirements for a responsive, modular STEM-themed display.</p> <p>Below are the individual datasheets of the team emmebrs along with their role in the team.</p> <ul> <li>Aadish Website - Actuator</li> <li>Shaurya Website - Sensor</li> </ul>","tags":["tag1","tag2"]},{"location":"#image","title":"Image","text":"<p>This is a picture of our working system on Innovation Showcase May 2025: </p>","tags":["tag1","tag2"]},{"location":"#title","title":"Title","text":"<p>STEM Demonstration</p> <p>Team 309A</p> <p>Members:</p> <ul> <li>Aadish Lele</li> <li>Shaurya Manglik</li> </ul> <p>Preperation Date: April 20, 2025</p> <p>Spring 2025</p> <p>ASU, EGR 314, Prof. Nichols</p>","tags":["tag1","tag2"]},{"location":"#links-to-other-pages","title":"Links to Other Pages","text":"<p>Ideation and Concept Generation</p> <p>Block/Process Diagrams &amp; Message Structure</p>","tags":["tag1","tag2"]},{"location":"Appendix/","title":"Appendix","text":""},{"location":"Appendix/#appendix-a-team-organization","title":"Appendix A - Team Organization","text":"<p>Team Goals</p> <ul> <li>Develop a fully functional prototype that meets all project requirements and specifications for the innovatoin showcase.</li> <li>Complete all project milestones on time, including research, design, testing, and final delivery.</li> <li>Design a product that meets the requirements of us and our users.</li> <li>Make sure the product is practical and usable for our users.</li> <li>Design a product that encourages STEM based thinking for K-12 students.</li> </ul> <p>Class Goals</p> <ul> <li>Create a project that can be showcased in personal portfolios.</li> <li>Gain hands-on ecexperien in engineering principles, project management, and teamwork.</li> <li>Use this project as a stepping stone to internships, jobs, or graduate school applications.</li> <li>Develop skills and experiences that will be valuable in real-world engineering careers.</li> <li>Grow and develop new skills with professional engineering software.</li> </ul>"},{"location":"Block_Diagram_and_Process_Structure/","title":"Block/Process Diagrams & Message Structure","text":""},{"location":"Block_Diagram_and_Process_Structure/#block-diagram","title":"Block Diagram","text":""},{"location":"Block_Diagram_and_Process_Structure/#explaination","title":"Explaination:","text":"<p>As Team 309A in the EGR314 course, our project goal was to demonstrate modularity, sensor-actuator interaction, and the use of standard communication protocols. We structured the block diagram to reflect a clear division between sensing and actuation, each handled by custom-built PCBs developed by different team members.</p> <ul> <li> <p>Shaurya\u2019s PCB integrates a temperature sensor with the PIC18F27Q10 microcontroller via I2C, enabling precise temperature readings with minimal wiring complexity.</p> </li> <li> <p>Aadish\u2019s PCB features a PIC18F47Q10 microcontroller that interfaces with the IFX9201SGAUMA1 motor driver via SPI, allowing fast, reliable motor control.</p> </li> <li> <p>Inter-PCB communication is handled via UART, with TX and RX lines routed through pin 2 of our ribbon cable headers, satisfying the product requirement for UART-based data exchange between subsystems.</p> </li> <li> <p>The ribbon cable simplifies physical connectivity, aligning both power and communication signals for ease of use and testing.</p> </li> </ul> <p>This block structure meets all outlined requirements:</p> <ul> <li> <p>SPI for motor control.</p> </li> <li> <p>I2C for sensor reading.</p> </li> <li> <p>UART between PCBs.</p> </li> </ul> <p>-Shared PIC microcontroller family.</p> <ul> <li> <p>One sensor (temperature) and one actuator (motor).</p> </li> <li> <p>Compact and modular design using ribbon cables.</p> </li> </ul> <p>By designing a structured and readable block diagram, we ensured clarity in system functionality and adherence to modular design principles.  </p>"},{"location":"Block_Diagram_and_Process_Structure/#connector-diagram","title":"Connector Diagram","text":""},{"location":"Block_Diagram_and_Process_Structure/#general-system","title":"General System","text":"<pre><code>[Shaurya (Temp Sensor)] \u2192 UART \u2192 [Aadish (Motor Driver)]\n                                    \u2191\n                            UART ACK \u2190 LED On\n</code></pre> <ul> <li>Shaurya uses the AHT21 I2C temperature sensor.</li> <li>Aadish uses the IFX9201SGAUMA1 H-Bridge motor driver.</li> <li>UART is used for all communication between the two.</li> </ul>"},{"location":"Block_Diagram_and_Process_Structure/#process-diagram","title":"Process Diagram","text":"<pre><code>sequenceDiagram\nactor Environment\nactor Shaurya\nactor Aadish\n\nloop Every 1s\n  Environment--&gt;&gt;Shaurya: Ambient Temperature\n  Shaurya-&gt;&gt;Shaurya: Read Temp via I2C\n  Shaurya--&gt;&gt;Aadish: Motor Direction (Forward if &gt;25\u00b0C, Reverse if \u226425\u00b0C)\n  Aadish-&gt;&gt;Aadish: Change Motor Direction\n  Aadish--&gt;&gt;Shaurya: ACK Received\n  Shaurya-&gt;&gt;Shaurya: Turn on ACK LED\nend</code></pre>"},{"location":"Block_Diagram_and_Process_Structure/#explaination_1","title":"Explaination","text":"<p>Our communication sequence diagram outlines the real-time interaction between the sensor and actuator subsystems:   </p> <ul> <li> <p>Temperature Reading: The PIC18F27Q10 on Shaurya's PCB reads the temperature sensor using I2C.</p> </li> <li> <p>Data Transmission: The temperature value is processed and transmitted via UART to Aadish's PCB.</p> </li> <li> <p>Motor Response: Upon receiving the temperature data, the PIC18F47Q10 interprets it and sends SPI commands to the motor driver, adjusting the motor\u2019s speed or direction.</p> </li> <li> <p>Feedback Signal (Optional): A confirmation or status signal can be sent back over UART to verify correct action.   </p> </li> </ul> <p>This satisfies user needs by creating a system that is:   </p> <ul> <li> <p>Interactive: Motor behavior dynamically reflects real-time environmental data.</p> </li> <li> <p>Modular: Communication between independent subsystems is clearly defined.</p> </li> <li> <p>Scalable: The message structure and sequence allow for additional features like acknowledgments or error handling.</p> </li> <li> <p>The functional sequence supports intuitive behavior (e.g., motor speeding up in response to rising temperature), making it understandable and meaningful for both users and evaluators.</p> </li> </ul>"},{"location":"Block_Diagram_and_Process_Structure/#message-structure","title":"Message Structure","text":""},{"location":"Block_Diagram_and_Process_Structure/#ids","title":"IDs","text":"ID User 0xFC Shaurya 0xFD Aadish"},{"location":"Block_Diagram_and_Process_Structure/#message-types","title":"Message Types","text":"<p>Type 1 \u2013 Motor Direction Command (Sent from Shaurya to Aadish)</p> Condition Message ID Meaning Temp \u2264 25\u00b0C 0x01 Motor Forward 25\u00b0C &lt; Temp \u2264 30\u00b0C 0x02 Motor Reverse Temp &gt; 30\u00b0C 0x03 Motor Off <p>Type 2 \u2013 Acknowledgment (Sent from Aadish to Shaurya)</p> Message ID Meaning 0x01 Motor Forward Confirmation \u2013 Blink RB0 0x02 Motor Reverse Confirmation \u2013 Blink RB4 0x03 Motor Off Confirmation \u2013 Blink RB0 &amp; RB4"},{"location":"Block_Diagram_and_Process_Structure/#serial-message-format","title":"Serial Message Format","text":"Field Example (Motor Forward) Prefix FS Sender ID S Receiver ID A Data 01 (Forward) Suffix FS"},{"location":"Block_Diagram_and_Process_Structure/#example-message-flow","title":"Example Message Flow","text":""},{"location":"Block_Diagram_and_Process_Structure/#if-temperature-is-greater-than-25c-and-less-than-30c","title":"If temperature is  greater than 25\u00b0C and less than 30\u00b0C:","text":"<ul> <li>Shaurya sends: <code>FS</code>, <code>S</code>, <code>A</code>, <code>0x02</code>, <code>FS</code></li> <li>Aadish sets motor direction forward</li> <li>Aadish replies: <code>FS</code>, <code>A</code>, <code>S</code>, <code>0x02</code>, <code>FS</code></li> <li>Shaurya turns on LED to confirm ACK</li> </ul>"},{"location":"Block_Diagram_and_Process_Structure/#if-temperature-is-less-than-25c","title":"If temperature is less than 25\u00b0C:","text":"<ul> <li>Shaurya sends: <code>FS</code>, <code>S</code>, <code>A</code>, <code>0x01</code>, <code>FS</code></li> <li>Aadish sets motor direction reverse</li> <li>Aadish replies with ACK and LED lights up</li> </ul>"},{"location":"Block_Diagram_and_Process_Structure/#if-temperature-is-above-30c","title":"If temperature is above 30\u00b0C:","text":"<ul> <li>Shaurya sends: <code>FS</code>, <code>S</code>, <code>A</code>, <code>0x03</code>, <code>FS</code></li> <li>Aadish sets motor direction stop</li> <li>Aadish replies with ACK and LED lights up</li> </ul>"},{"location":"Block_Diagram_and_Process_Structure/#software-changes","title":"Software Changes","text":"<p>Updated I2C Pin Configuration for New Temperature Sensor Although we initially planned to use the TC74 temperature sensor, we replaced it with a different I2C-based temperature sensor (AHT21) due to communication issues. The only software change required was updating the SDA and SCL pin assignments in MPLAB X MCC (Classic) to match the new sensor\u2019s wiring. The rest of the I2C configuration and data handling code remained unchanged.</p> <p>Corrected SPI Chip Select (CS) Pin Handling for Motor Driver We modified the SPI motor control code to ensure the Chip Select (CS) pin is actively pulled Low before any SPI transaction with the IFX9201SGAUMA1 motor driver. This was done by explicitly setting the CS pin Low before SPI commands and setting it High afterward, ensuring consistent and reliable communication.</p> <p>Switched from MCC Melody to MCC Classic for Peripheral Configuration We transitioned from MCC Melody to MCC Classic for configuring I2C and SPI peripherals. MCC Classic provided more direct control over pin assignments and register-level settings, which allowed for a more stable and customizable software setup, especially for I2C communication.</p> <p>Refined UART Message Protocol with Command Byte Mapping We simplified the UART communication between microcontrollers by introducing fixed command bytes (e.g., 0x01 for forward, 0x02 for reverse, 0x03 for stop). This replaced the earlier format that transmitted raw or string-based data, reducing complexity on the motor control side.</p> <p>Established Clear Temperature-to-Command Logic We updated the software to map specific temperature ranges to motor commands. For example, when the temperature sensor reports values between 25\u201330\u00b0C, the motor moves forward. When the temperature reads below 25\u00b0C\u2014triggered by a sensor board\u2014the motor reverses. This mapping made the system behavior consistent and predictable.</p>"},{"location":"Ideation-and-Concept-Generation/","title":"Ideation and Concept Generation","text":""},{"location":"Ideation-and-Concept-Generation/#about-our-exhibit","title":"About Our Exhibit","text":"<p>Goal of our Exhibit</p> <p>We want our exhibit to inspire future STEM students by showcasing the real-world capabilities of STEM concepts through a fun and interactive experience. To achieve this, our design focuses on engagement, creativity, and hands-on learning, ensuring that visitors are not only exposed to STEM principles but also actively participate in applying them. We aim to make STEM ideas accessible, exciting, and easy to explore, and we want to encourage a curiosity and problem-solving mindset with our users.</p> <p>Target Audience</p> <p>For this project, we know that our target audience is going to be high school students and some adults with a basic high school education. Since our showcase will be with ASU, the audience will have a varying amount of people with different backgrounds and involvement with the school. Most of the users will have done many projects or designs similar to what we may have, but we hope to get some younger users as well.</p>"},{"location":"Ideation-and-Concept-Generation/#idea-generation","title":"Idea Generation","text":"<p>For our initial idea generation, we were focused mostly on generating ideas that seemed fun or interesting to our audience of highschool students. This includes things that are very interactive, visally interesting, or simply just cool looking. We wanted things that can catch the eye of this audience to entice them to view our exhibit.</p> Initial Ideas Line Following RobotObstacle Avoiding RobotTrash Collecting RobotRC CarDIY Power BankGesture Controlled LightsDigital DiceMusic VisualizerDroneFace Tracking RobotDrawing RobotTrash Sorting RobotAnimatronicSlot MachineCleaning RobotRobot DogDelivery DroneBalancing RobotFirefighting RobotGesture Controlled CarTennis Ball ShooterClimbing RobotTank RobotRemote Controlled RobotSubmarine RobotArticulated Robot HandWall Following RobotMaze Solving RobotWireless Picture DisplaySpinning TopObject Tracking RobotGarage Parking AssistantBike Speed MonitorGesture Controlled DroneAutomatic Webcam TrackerInteractive Fidget ToyCustomizable Slot MachineBall Balancing RobotHand Following RobotInteractive Light SculptureObstacle Climbing RobotBaby MonitorCargo Carrying RobotPortable Air Quality MonitorRobot Football KickerRobot Soccer Ball KickerRobot Baseball PitcherInteractive Fidget SpinnerWireless Speed MonitorSmart Recycling BinRobot Arm with VisionGPS DeviceAutomatic Trash Collector3D Object ScannerSmart KiteVoice Activated RC CarRobotic Chess PlayerRoom Mapping RobotRope Climbing RobotBasketball Shooting RobotItem Sorting RobotEdge Detection RobotColor-Sorting RobotSolar TrackerSelf Balancing RobotHeart Rate MonitorWireless Door LockVoice Controlled RobotWireless Automatic Trash CanGesture Controlled RobotWireless DoorbellDigital CompassGesture Mimicking RobotSmart Alarm ClockAutomatic Curtain CloserSmart Home AutomationAutomatic Door OpenerMotion Activated LightRemote Control Dancing RobotJenga RobotFall Detection RobotMini Battle BotsTransformers Style RobotAutonomous Vacuum RobotSmart Plant Watering SystemLine Following Train SystemUnderwater Drone for ExplorationRobotic Arm for 3D PrintingAutomated Pet FeederTrash Can with Object RecognitionSolar-Powered RC CarPersonal Assistant RobotGesture-Controlled WheelchairAutomated Traffic Light SystemRobotic WindowCleaner Interactive WhiteboardRobot Drone-Based Delivery SystemSmart Inventory Management RobotAI-Powered Chess RobotRobotic Crane"},{"location":"Ideation-and-Concept-Generation/#sorted-ideas","title":"Sorted Ideas","text":"<p>After compiling our initial ideas, we sorted them into categories and started narrowing them down into ideas that suited our users best. We took a couple things into consideration.</p> <ol> <li>How eye catching is the idea?</li> <li>Will the user be able to easily understand and interact with it?</li> <li>Does the idea encourage STEM based thinking or is it just a fun toy?</li> <li>Is it safe to interact with?</li> <li>Is it practical for us to make?</li> </ol> Robots Toys Device Line Following RobotObstacle Avoiding RobotTrash Collecting RobotFace TrackingRobot DrawingRobot Trash SortingRobot CleaningRobot RobotDog BalancingRobot FirefightingRobot Gesture ControlledCar Tennis Ball ShooterClimbing RobotTank RobotRemote Controlled RobotSubmarine RobotArticulated Robot HandWall Following RobotMaze Solving RobotObject Tracking RobotBall Balancing RobotHand Following RobotObstacle Climbing RobotCargo Carrying RobotRobot Football KickerRobot Soccer Ball KickerRobot Baseball PitcherRobot Arm with VisionRobot Chess PlayerRoom Mapping RobotRope Climbing RobotBasketball Shooting RobotItem Sorting RobotEdge Detection RobotColor-Sorting RobotSelf Balancing RobotVoice Controlled RobotGesture Controlled RobotGesture Mimicking RobotFall Detection RobotMini Battle BotsTransformers Style Robot RC CarDigital DiceDroneAnimatronicSlot MachineDelivery DroneGesture Controlled CarTennis Ball ShooterSpinning TopGesture Controlled DroneInteractive Fidget ToyCustomizable Slot MachineInteractive Light SculptureSmart KiteVoice Activated RC CarRemote Control Dancing RobotJenga Robot DIY Power BankGesture Controlled LightsMusic VisualizerWireless Picture DisplayGarage Parking AssistantBike Speed MonitorAutomatic Webcam TrackerBaby MonitorPortable Air Quality MonitorWireless Speed MonitorSmart Recycling BinGPS DeviceWireless Automatic Trash Can3D Object ScannerWireless Door LockWireless DoorbellDigital CompassSmart Alarm ClockAutomatic Curtain CloserSmart Home AutomationAutomatic Door OpenerMotion Activated LightAutomatic Trash Collector Removed Impractical Ideas Line Following RobotObstacle Avoiding RobotBalancing RobotClimbing RobotTank RobotWall Following RobotMaze Solving RobotObject Tracking RobotBall Balancing RobotRobot Chess PlayerItem Sorting RobotSelf Balancing RobotMini Battle BotsRC CarDigital DiceSpinning TopInteractive Fidget ToyBike Speed MonitorAutomatic Webcam TrackerWireless Speed MonitorGPS DeviceWireless Door LockWireless DoorbellDigital CompassSmart Alarm ClockAutomatic Curtain Closer Tailored for Users Line Following RobotBalancing RobotTank RobotMaze Solving RobotRobot Chess PlayerSelf Balancing RobotMini Battle BotsRC CarDigital DiceSpinning TopInteractive Fidget Toy <p>After narrowing down our ideas into a handful of options that meet the requirements for us and our users, we ultimatly decided that a spinning top was the best choice. We felt this option was very eye catching from afar so we could attract an audience. We also believe this will encourage STEM based thinking out of our users because a spinning top raises the question of how it balances. Overall, this idea is fun, interesting and thought provoking which is why we chose it for our project.</p>"},{"location":"Ideation-and-Concept-Generation/#concept-sketch","title":"Concept Sketch","text":"<p>The Spinning Top Interactive Exhibit is designed to engage users with a interactive demonstration of balance, motion, and physics principles. Its motorized spinning mechanism, powered by a removable battery, ensures smooth and stable operation. There are adjustable PCB slots to ensure weight is distributed across the top to keep it balanced. The inner shell houses PCB components and ribbon cable slots, ensuring secure connections and minimal interference during operation. The motor at the base provides a user controlled speed, keeping the top upright and balanced. An integrated temperature sensor senses the temperature values and sends them to the motor PCB using UART communication protocol. When the temperature increases over a certain limit, the direction of the motor changes.</p>"},{"location":"Ideation-and-Concept-Generation/#presentation","title":"Presentation","text":""},{"location":"Innovation%20Showcase%20Picture/","title":"Innovation Showcase Picture","text":""},{"location":"Innovation%20Showcase%20Picture/#innovation-showcase-picture","title":"Innovation Showcase Picture:","text":"<p>Poster_EGR314.pdf </p> <p>Poster Image: </p>"},{"location":"Reflections/","title":"Reflections","text":""},{"location":"Reflections/#final-reflections-of-egr-314-embedded-systems-design-ii","title":"Final Reflections of EGR 314: Embedded Systems Design II","text":""},{"location":"Reflections/#lessons-learned","title":"Lessons Learned","text":"<ul> <li> <p>Working on this project as part of Team 309A in EGR314 provided us with a wide range of valuable technical and personal lessons:</p> </li> <li> <p>PCB and Schematic Design: We learned how to effectively design schematics and PCBs using industry-standard tools. This included labeling nets, organizing components, and ensuring logical flow for easier debugging and manufacturing.</p> </li> <li> <p>Industrial Communication Protocols: We gained hands-on experience working with SPI and I2C protocols\u2014learning not only how to implement them in code but also how to troubleshoot issues like timing mismatches, improper wiring, or register configuration errors.</p> </li> <li> <p>Server and WiFi Setup Using Microcontrollers: We experimented with setting up local servers and WiFi communication using ESP32s in conjunction with our PIC microcontrollers, preparing us for future IoT or web-connected hardware applications.</p> </li> <li> <p>Human-Machine Interface (HMI) Programming: We developed a simple yet effective user interface to monitor and interact with our system, learning how to bridge low-level hardware control with user-facing functionality.</p> </li> <li> <p>Debugging and Testing with Oscilloscopes: Using lab tools like oscilloscopes helped us trace UART signals, validate logic levels, and verify protocol timing\u2014skills that are essential for any embedded system engineer.</p> </li> <li> <p>Persistence in Debugging: One of the most important lessons was learning to stay persistent. Many bugs were not resolved quickly, and it took multiple iterations, logic reviews, and hardware checks to isolate and solve issues.</p> </li> <li> <p>Problem-Solving Under Pressure: At times, we were stuck without a clear path forward, but through brainstorming and cross-verifying each subsystem, we learned to logically decode issues and find working solutions.</p> </li> <li> <p>Work Ethic and Engineering Reality: We experienced firsthand what it takes to be an engineer\u2014spending long hours, working weekends, and putting in extra effort to ensure the system functioned as expected.</p> </li> <li> <p>Team Communication and Collaboration: Clear communication between team members was essential. We coordinated changes, shared updates regularly, and supported each other through design and testing hurdles.</p> </li> <li> <p>Deliverable Management and Time Efficiency: Throughout the course, we improved our ability to produce correct and complete deliverables under tight deadlines, a critical skill in both academic and professional engineering environments.</p> </li> </ul>"},{"location":"Reflections/#recommendations-for-future-students","title":"Recommendations for Future Students","text":"<ul> <li> <p>Start learning how to use MPLAB X and MCC early so that you are comfortable with configuring peripherals like SPI, UART, and I2C when the time comes.</p> </li> <li> <p>Get familiar with reading datasheets\u2014they are your best source for understanding how to properly set up and control sensors, drivers, and microcontrollers.</p> </li> <li> <p>Prioritize clear team communication from day one to avoid duplicate work or design mismatches later in the semester.</p> </li> <li> <p>Regularly test individual subsystems before integrating them, as debugging a full system without knowing the behavior of its parts is very difficult.</p> </li> <li> <p>Keep up with your documentation and commit code often, so that your reports and demos are easier to assemble when deadlines are tight.</p> </li> </ul>"},{"location":"Reflections/#version-20-communication-architecture-improvements","title":"Version 2.0 \u2013 Communication Architecture Improvements","text":"<p>If we were to create a Version 2.0 of our communication architecture and system design, we would focus on improving hardware reliability, user interaction, and development workflow to create a more robust and interactive experience.</p> <ul> <li> <p>Reliable Temperature Sensor Integration: In Version 1.0, our sensor had issues with reliably. For Version 2.0, we would select a tested temperature sensor and fully validate it using I2C scanning tools and oscilloscope monitoring to ensure accurate communication with the PIC18F series microcontrollers.</p> </li> <li> <p>Using the PIC18F47Q10 for Both Subsystems: Standardizing on the PIC18F47Q10 across both PCBs would unify our firmware, reduce debugging time, and simplify code development by avoiding hardware-specific variations.</p> </li> <li> <p>Improved PCB Modularity and Compactness: We would redesign the layout for a smaller, more modular PCB with clearer separation of subsystems (power, comms, logic). This would save space and reduce manufacturing costs while maintaining clarity in the hardware architecture.</p> </li> <li> <p>Verification of Soldering and Continuity: In Version 2.0, we would conduct thorough soldering checks and use a multimeter to test all critical traces and pins\u2014especially for UART, SPI, and I2C\u2014before powering the board.</p> </li> <li> <p>Incorporating Multiple Test Points: We would add test points on all major signal (UART pins, I2C pins and SPi pins) lines to allow quick and safe probing during debugging, reducing the risk of damaging the board and helping isolate faults faster.</p> </li> <li> <p>Early Setup of MPLAB X and MCC: We would fully configure MPLAB X and MCC Classic early in the semester, and build small test projects to confirm UART, SPI, and I2C setup before integrating them into the full system.</p> </li> <li> <p>Maximizing In-Class Lab Resources: Tools like oscilloscopes and in class labs would be used from day one. These would be invaluable in diagnosing signal integrity issues, timing problems, and confirming communication protocols.</p> </li> <li> <p>User-Readable Temperature Display: To improve usability and meet interactive display goals, we would implement a live temperature readout on an LCD or OLED display, allowing users to see the real-time sensor output.</p> </li> <li> <p>3D-Printed Spinning Top as a Physical Display: We would design and integrate a 3D-printed spinning top attached to the motor shaft. This would serve as a physical visualization of motor actuation\u2014its speed or direction reflecting the current temperature range, adding a tactile, engaging element to our project.</p> </li> </ul>"},{"location":"resources/","title":"Potential Components","text":""},{"location":"resources/#actuators","title":"Actuators","text":"<ul> <li>9V-12V DC Motor</li> <li>IFX9201SGAUMA1 Motor Driver</li> </ul>"},{"location":"resources/#sensors","title":"Sensors","text":"<ul> <li>TC74A4 Temperature Sensor</li> </ul>"},{"location":"resources/#microcontrollers","title":"Microcontrollers","text":"<ul> <li>PIC18 Comparison Document</li> <li>PIC18-Q10 Product Family</li> <li>PIC18F47Q10 LINK</li> </ul>"},{"location":"resources/#battery","title":"Battery","text":"<ul> <li>9V-12V Battery</li> </ul>"},{"location":"resources/#videos-and-pictures-of-the-project","title":"Videos and Pictures of the Project","text":"<p>Final Project picture: </p> <p>Both PCBs combined Picture: </p>"},{"location":"team-organization/","title":"Team Organization","text":""},{"location":"team-organization/#team-charter","title":"Team Charter","text":"<p>Our team is dedicated to creating a working prototype that meets the project goals and helps us grow as engineers by building real-world skills and preparing for our future careers.</p> <p>We came up with this statement by focusing on our top priorities as a team. We want to build a working prototype that not only meets the project goals but also helps us grow as engineers. This project is more than just an assignment, it\u2019s a chance to develop real world skills and prepare for the careers we\u2019re excited to pursue.</p>"},{"location":"team-organization/#product-mission-statement","title":"Product Mission Statement","text":"<p>Our mission is to create a practical, user-friendly product that inspires STEM learning and encourages engineering thinking for K-12 students</p> <p>Our team used the core concept of inspiring K-12 STEM education do develop our mission statement. We wanted to create a product that not only encourages engineering thinking but is also practical and easy to use. Through discussion, we refined our statement to reflect our shared passion for STEM and how we can use that to make STEM education accessible and impactful.</p>"},{"location":"team-organization/#contact-information","title":"Contact Information:","text":"<p>Aadish Lele Motor Driver Subsystem: - Aadish Website - Actuator </p> <p>Shaurya Manglik Temperature Sensor Subsystem:  - Shaurya Website - Sensor </p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\n  loader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\n  const svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\n  console.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}